import { ref } from "vue";
import type { LatestVideo, SearchResultItem } from "~/types/invidious";

export const defaultInstances = ["https://inv.nadeko.net"];
export const invidiousInstances = ref<string[]>([...defaultInstances]);
export const invidiousInstance = ref(defaultInstances[0]);
export const isAuthenticated = ref(false);
export const username = ref("");

interface ChannelResponse {
  author: string;
  authorId: string;
  authorUrl: string;
  authorVerified: boolean;
  authorBanners: ImageObject[];
  authorThumbnails: ImageObject[];
  subCount: number;
  totalViews: number;
  joined: number;
  autoGenerated: boolean;
  isFamilyFriendly: boolean;
  description: string;
  descriptionHtml: string;
  allowedRegions: string[];
  tabs: string[];
  latestVideos: VideoObject[];
  relatedChannels: ChannelObject[];
}

interface ImageObject {
  url: string;
  width: number;
  height: number;
}

interface VideoObject {
  type: string;
  title: string;
  videoId: string;
  author: string;
  authorId: string;
  authorUrl: string;
  videoThumbnails: ImageObject[];
  description: string;
  descriptionHtml: string;
  viewCount: number;
  published: number;
  lengthSeconds: number;
}

interface ChannelObject {
  author: string;
  authorId: string;
  authorUrl: string;
  authorThumbnails: ImageObject[];
  subCount: number;
  videoCount: number;
  description: string;
}

interface ChannelVideosResponse {
  videos: LatestVideo[];
  continuation: string | null;
}

if (typeof localStorage !== "undefined") {
  const savedInstance = localStorage.getItem("invidiousInstance");
  const savedUsername = localStorage.getItem("invidiousUsername");

  const customInstances = localStorage.getItem("customInvidiousInstances");
  if (customInstances) {
    try {
      const instances = JSON.parse(customInstances);
      if (Array.isArray(instances)) {
        invidiousInstances.value = [...defaultInstances, ...instances];
      }
    } catch (e) {
      console.error("Failed to parse custom instances:", e);
    }
  }

  if (savedInstance) {
    invidiousInstance.value = savedInstance;
  }

  if (savedUsername) {
    username.value = savedUsername;
    isAuthenticated.value = true;
  }
}

export const invidiousService = {
  setInstance(url: string) {
    let formattedUrl = url;
    if (!formattedUrl.startsWith("http")) {
      formattedUrl = "https://" + formattedUrl;
    }
    if (formattedUrl.endsWith("/")) {
      formattedUrl = formattedUrl.slice(0, -1);
    }

    if (!invidiousInstances.value.includes(formattedUrl)) {
      this.addCustomInstance(formattedUrl);
    }

    invidiousInstance.value = formattedUrl;
    if (typeof localStorage !== "undefined") {
      localStorage.setItem("invidiousInstance", formattedUrl);
    }
  },

  logout() {
    isAuthenticated.value = false;
    username.value = "";

    if (typeof localStorage !== "undefined") {
      localStorage.removeItem("invidiousUsername");
      localStorage.removeItem("invidiousPassword");
    }
  },

  tokenLogin(tokenData: any, instanceUrl: string) {
    try {
      let parsedToken = tokenData;
      if (typeof tokenData === "string") {
        try {
          parsedToken = JSON.parse(tokenData);
        } catch (e) {
          return {
            success: false,
            error: "Invalid token format",
          };
        }
      }

      if (!parsedToken.session || !parsedToken.signature) {
        return {
          success: false,
          error: "Invalid token data: missing required fields",
        };
      }

      if (!instanceUrl.startsWith("http")) {
        instanceUrl = "https://" + instanceUrl;
      }
      if (instanceUrl.endsWith("/")) {
        instanceUrl = instanceUrl.slice(0, -1);
      }

      this.setInstance(instanceUrl);

      if (typeof localStorage !== "undefined") {
        localStorage.setItem("invidiousToken", JSON.stringify(parsedToken));
        localStorage.setItem("invidiousInstance", instanceUrl);
      }

      isAuthenticated.value = true;
      username.value = parsedToken.username || "User";

      return { success: true };
    } catch (error: any) {
      console.error("Token login failed:", error);
      return {
        success: false,
        error: error.message || "Failed to login with token",
      };
    }
  },

  initiateTokenAuth(instanceUrl: string, callbackPath = "/auth/callback") {
    try {
      if (!instanceUrl.startsWith("http")) {
        instanceUrl = "https://" + instanceUrl;
      }
      if (instanceUrl.endsWith("/")) {
        instanceUrl = instanceUrl.slice(0, -1);
      }

      if (typeof localStorage !== "undefined") {
        localStorage.setItem("pendingInstance", instanceUrl);
      }

      const callbackUrl = `${window.location.origin}${callbackPath}`;

      const params = new URLSearchParams({
        scopes: "",
        callback_url: callbackUrl,
        expire: "31536000",
      });

      window.location.href = `${instanceUrl}/authorize_token?${params.toString()}`;
    } catch (error: any) {
      console.error("Failed to initiate auth flow:", error);
      return {
        success: false,
        error: error.message || "Failed to start authentication process",
      };
    }
  },

  handleAuthCallback(tokenData: string) {
    try {
      const instanceUrl =
        localStorage.getItem("pendingInstance") || invidiousInstance.value;

      localStorage.removeItem("pendingInstance");

      return this.tokenLogin(tokenData, instanceUrl);
    } catch (error: any) {
      console.error("Auth callback handling failed:", error);
      return {
        success: false,
        error: error.message || "Failed to complete authentication",
      };
    }
  },

  async getUserFeed(params = {}) {
    if (!isAuthenticated.value) {
      return { error: "Not authenticated" };
    }

    try {
      const token = this.getAuthToken();
      if (!token) {
        return { error: "No valid authentication token found" };
      }

      const url = `${
        invidiousInstance.value
      }/api/v1/auth/feed${this.buildQueryString(params)}`;

      const response = await fetch(url, {
        method: "GET",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        throw new Error(
          errorData?.error || `Failed to fetch feed: ${response.status}`
        );
      }

      return await response.json();
    } catch (error: any) {
      console.error("Error fetching user feed:", error);
      return { error: error.message || "Failed to fetch feed" };
    }
  },

  getAuthToken() {
    if (typeof localStorage === "undefined") {
      return "";
    }

    const tokenStr = localStorage.getItem("invidiousToken");
    if (!tokenStr) {
      return "";
    }

    try {
      const token = JSON.parse(tokenStr);
      if (!token.session || !token.signature) {
        console.error("Invalid token format:", token);
        return "";
      }
      return `${token.session}:${token.signature}`;
    } catch (e) {
      console.error("Error parsing auth token:", e);
      return "";
    }
  },

  async getUserSubscriptions() {
    if (!isAuthenticated.value) {
      return { error: "Not authenticated" };
    }

    try {
      const token = this.getAuthToken();
      if (!token) {
        return { error: "No valid authentication token found" };
      }

      const url = `${invidiousInstance.value}/api/v1/auth/subscriptions`;

      const response = await fetch(
        url,
        this.createFetchOptions("GET", token || null)
      );

      if (!response.ok) {
        throw new Error(`Failed to fetch subscriptions: ${response.status}`);
      }

      return await response.json();
    } catch (error: any) {
      console.error("Error fetching subscriptions:", error);
      return { error: error.message || "Failed to fetch subscriptions" };
    }
  },

  convertUrl(youtubeUrl: string) {
    const videoId = this.extractVideoId(youtubeUrl);
    return `/watch?v=${videoId}`;
  },

  extractVideoId(url: string) {
    const regex =
      /(?:\?v=|\/embed\/|\/watch\?v=|\/\w+\/\w+\/|youtu\.be\/|\/v\/|\/e\/|watch\?v%3D|watch\?feature=player_embedded&v=|%2Fvideos%2F|embed%2F|youtu.be%2F|v%2F)([^#&?]*).*/;
    const match = url.match(regex);
    return match && match[1].length === 11 ? match[1] : null;
  },

  async getPopularVideos(channelId: string): Promise<ChannelResponse | null> {
    try {
      const url = `${invidiousInstance.value}/api/v1/popular`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch channel: ${response.status}`);
      }

      const result = await response.json();
      return result.filter(
        (video: { lengthSeconds: number }) => video.lengthSeconds != 0
      );
    } catch (error) {
      console.error("Error fetching channel details:", error);
      return null;
    }
  },

  async searchVideos(query: string, params = {}): Promise<SearchResultItem[]> {
    try {
      const searchParams = {
        q: query,
        ...params,
      };
      const url = `${
        invidiousInstance.value
      }/api/v1/search${this.buildQueryString(searchParams)}`;

      const response = await fetch(url, {
        headers: {
          Accept: "application/json",
        },
      });

      const results = await response.json();
      return results.map((item: { type: string; authorId: any }) => {
        if (item.type === "channel") {
          return {
            ...item,
            isChannel: true,
            url: `/channel/${item.authorId}`,
          };
        }
        return item;
      });
    } catch (error) {
      console.error("Error searching:", error);
      return [];
    }
  },

  async getChannelDetails(channelId: string): Promise<ChannelResponse | null> {
    try {
      const url = `${invidiousInstance.value}/api/v1/channels/${channelId}`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch channel: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching channel details:", error);
      return null;
    }
  },

  async getChannelVideos(
    channelId: string,
    params: {
      continuation?: string | null;
    } = {}
  ): Promise<ChannelVideosResponse> {
    try {
      const queryString = params.continuation
        ? `?continuation=${encodeURIComponent(params.continuation)}`
        : "";

      const url = `${invidiousInstance.value}/api/v1/channels/${channelId}/videos${queryString}`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch channel videos: ${response.status}`);
      }

      const data = await response.json();
      return {
        videos: data.videos || [],
        continuation: data.continuation || null,
      };
    } catch (error) {
      console.error("Error fetching channel videos:", error);
      return { videos: [], continuation: null };
    }
  },

  async getRelatedChannels(channelId: string, continuation?: string) {
    try {
      const url = `${
        invidiousInstance.value
      }/api/v1/channels/${channelId}/channels${
        continuation ? `?continuation=${continuation}` : ""
      }`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch related channels: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching related channels:", error);
      return { relatedChannels: [], continuation: null };
    }
  },

  async getChannelPlaylists(
    channelId: string,
    params: {
      sort_by?: "oldest" | "newest" | "last";
      continuation?: string;
    } = {}
  ) {
    try {
      const url = `${
        invidiousInstance.value
      }/api/v1/channels/${channelId}/playlists${this.buildQueryString(params)}`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(
          `Failed to fetch channel playlists: ${response.status}`
        );
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching channel playlists:", error);
      return { playlists: [], continuation: null };
    }
  },

  async getChannelCommunity(channelId: string, continuation?: string) {
    try {
      const url = `${
        invidiousInstance.value
      }/api/v1/channels/${channelId}/community${
        continuation ? `?continuation=${continuation}` : ""
      }`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch community posts: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching community posts:", error);
      return { comments: [], continuation: null };
    }
  },

  async searchChannel(channelId: string, query: string, page: number = 1) {
    try {
      const url = `${
        invidiousInstance.value
      }/api/v1/channels/${channelId}/search${this.buildQueryString({
        q: query,
        page,
      })}`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to search channel: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error searching channel:", error);
      return [];
    }
  },

  async getVideoDetails(videoId: string) {
    try {
      const response = await fetch(
        `${invidiousInstance.value}/api/v1/videos/${videoId}`
      );
      
      if (!response.ok) {
        const error: any = new Error(`Failed to fetch video: ${response.status}`);
        error.status = response.status;
        throw error;
      }
      
      return await response.json();
    } catch (error: any) {
      console.error("Error fetching video details:", error);
      
      if (error.message && error.message.includes("NetworkError") || 
          error.name === "TypeError" && error.message === "Failed to fetch") {
        error.isCorsError = true;
      }
      
      throw error;
    }
  },

  buildQueryString(params: any) {
    if (Object.keys(params).length === 0) return "";
    return "?" + new URLSearchParams(params).toString();
  },

  createFetchOptions(method = "GET", token: string | null = null) {
    const options: {
      method: string;
      headers: {
        Accept: string;
        "Content-Type": string;
        Authorization?: string;
      };
    } = {
      method,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
    };

    if (token) {
      options.headers["Authorization"] = `Bearer ${token}`;
    }

    return options;
  },

  addCustomInstance(url: string) {
    let formattedUrl = url.trim();
    if (!formattedUrl.startsWith("http")) {
      formattedUrl = "https://" + formattedUrl;
    }
    if (formattedUrl.endsWith("/")) {
      formattedUrl = formattedUrl.slice(0, -1);
    }

    if (invidiousInstances.value.includes(formattedUrl)) {
      return { success: false, error: "Instance already exists" };
    }

    invidiousInstances.value.push(formattedUrl);

    if (typeof localStorage !== "undefined") {
      const customInstances = invidiousInstances.value.filter(
        (instance) => !defaultInstances.includes(instance)
      );
      localStorage.setItem(
        "customInvidiousInstances",
        JSON.stringify(customInstances)
      );
    }

    return { success: true };
  },

  removeCustomInstance(url: string) {
    if (defaultInstances.includes(url)) {
      return { success: false, error: "Cannot remove default instance" };
    }

    const index = invidiousInstances.value.indexOf(url);
    if (index === -1) {
      return { success: false, error: "Instance not found" };
    }

    if (invidiousInstance.value === url) {
      this.setInstance(defaultInstances[0]);
    }

    invidiousInstances.value.splice(index, 1);

    if (typeof localStorage !== "undefined") {
      const customInstances = invidiousInstances.value.filter(
        (instance) => !defaultInstances.includes(instance)
      );
      localStorage.setItem(
        "customInvidiousInstances",
        JSON.stringify(customInstances)
      );
    }

    return { success: true };
  },

  getInstances() {
    return invidiousInstances.value;
  },

  async getPlaylist(playlistId: string) {
    try {
      const url = `${invidiousInstance.value}/api/v1/playlists/${playlistId}`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch playlist: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching playlist details:", error);
      return null;
    }
  },

  async getComments(
    videoId: string,
    params: {
      continuation?: string;
      sort_by?: "top" | "new";
    } = {}
  ) {
    try {
      const url = `${
        invidiousInstance.value
      }/api/v1/comments/${videoId}${this.buildQueryString(params)}`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch comments: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching comments:", error);
      return { comments: [], continuation: null };
    }
  },

  async getTrending(
    region: string = "US",
    type: "" | "music" | "gaming" | "news" | "movies" = ""
  ) {
    try {
      let params: Record<string, string> = {};
      if (region) params.region = region;
      if (type) params.type = type;

      const url = `${
        invidiousInstance.value
      }/api/v1/trending${this.buildQueryString(params)}`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch trending videos: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching trending videos:", error);
      return [];
    }
  },

  async getCaptions(videoId: string, label: string = "") {
    try {
      let params: Record<string, string> = {};
      if (label) params.label = label;

      const url = `${
        invidiousInstance.value
      }/api/v1/captions/${videoId}${this.buildQueryString(params)}`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch captions: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching captions:", error);
      return { captions: [] };
    }
  },

  async getStats() {
    try {
      const url = `${invidiousInstance.value}/api/v1/stats`;
      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch instance stats: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching instance stats:", error);
      return null;
    }
  },

  async checkUserSubscription(channelId: string) {
    if (!isAuthenticated.value) {
      return { isSubscribed: false, error: "Not authenticated" };
    }

    try {
      const token = this.getAuthToken();
      if (!token) {
        return { isSubscribed: false, error: "No valid authentication token" };
      }

      const url = `${invidiousInstance.value}/api/v1/auth/subscriptions/${channelId}`;

      const response = await fetch(url, {
        method: "GET",
        headers: {
          Accept: "application/json",
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.status === 404) {
        return { isSubscribed: false };
      }

      if (!response.ok) {
        throw new Error(`Failed to check subscription: ${response.status}`);
      }

      return { isSubscribed: true };
    } catch (error: any) {
      console.error("Error checking subscription status:", error);
      return {
        isSubscribed: false,
        error: error.message || "Failed to check subscription status",
      };
    }
  },

  async subscribeToChannel(channelId: string) {
    if (!isAuthenticated.value) {
      return { success: false, error: "Not authenticated" };
    }

    try {
      const token = this.getAuthToken();
      if (!token) {
        return { success: false, error: "No valid authentication token" };
      }

      const url = `${invidiousInstance.value}/api/v1/auth/subscriptions/${channelId}`;

      const response = await fetch(url, {
        method: "POST",
        headers: {
          Accept: "application/json",
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to subscribe: ${response.status}`);
      }

      return { success: true };
    } catch (error: any) {
      console.error("Error subscribing to channel:", error);
      return {
        success: false,
        error: error.message || "Failed to subscribe to channel",
      };
    }
  },

  async unsubscribeFromChannel(channelId: string) {
    if (!isAuthenticated.value) {
      return { success: false, error: "Not authenticated" };
    }

    try {
      const token = this.getAuthToken();
      if (!token) {
        return { success: false, error: "No valid authentication token" };
      }

      const url = `${invidiousInstance.value}/api/v1/auth/subscriptions/${channelId}`;

      const response = await fetch(url, {
        method: "DELETE",
        headers: {
          Accept: "application/json",
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to unsubscribe: ${response.status}`);
      }

      return { success: true };
    } catch (error: any) {
      console.error("Error unsubscribing from channel:", error);
      return {
        success: false,
        error: error.message || "Failed to unsubscribe from channel",
      };
    }
  },
};
